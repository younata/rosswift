import Quick
import Nimble
import Foundation

@testable import Ros

extension String: RosMessage {
    public static var fields: [CodingKey] = []
    public static var definition: String = "string data\n\n"
}

final class RosMessageDecoderSpec: QuickSpec {
    override func spec() {
        var subject: RosDecoder!

        beforeEach {
            subject = RosDecoder()
        }

        describe("decoding a valid message") {
            // http://wiki.ros.org/ROS/Connection%20Header
            // example output from `rostopic pub /chatter std_msgs/String "hello"`
            let codedMessage: [UInt8] = [
0xb0, 0x00, 0x00, 0x00, // header message length (176 bytes)
      0x20, 0x00, 0x00, 0x00, // message_definition field length (32 bytes)
            0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x3d, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
            0x20, 0x64, 0x61, 0x74, 0x61, 0x0a, 0x0a, // message_definition=string data\n\n
      0x25, 0x00, 0x00, 0x00, // callerid field length (37 bytes)
            0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x69, 0x64, 0x3d, 0x2f, 0x72, 0x6f, 0x73, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x34, 0x37, 0x36, 0x37, 0x5f, 0x31,
            0x33, 0x31, 0x36, 0x39, 0x31, 0x32, 0x37, 0x34, 0x31, 0x35, 0x35, 0x37, // callerid=/rostopic_4767_1316912741557
      0x0a, 0x00, 0x00, 0x00, // latching field length
             0x6c, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x3d, 0x31, // latching=1
      0x27, 0x00, 0x00, 0x00, // md5sum field length (39 bytes)
            0x6d, 0x64, 0x35, 0x73, 0x75, 0x6d, 0x3d, 0x39, 0x39, 0x32, 0x63, 0x65, 0x38, 0x61, 0x31, 0x36, 0x38, 0x37, 0x63, 0x65, 0x63, 0x38, 0x63, 0x38, 0x62,
            0x64, 0x38, 0x38, 0x33, 0x65, 0x63, 0x37, 0x33, 0x63, 0x61, 0x34, 0x31, 0x64, 0x31, // md5sum=992ce8a1687cec8c8bd883ec73ca41d1
      0x0e, 0x00, 0x00, 0x00, // topic field length (14 bytes)
            0x74, 0x6f, 0x70, 0x69, 0x63, 0x3d, 0x2f, 0x63, 0x68, 0x61, 0x74, 0x74, 0x65, 0x72, // topic=/chatter
      0x14, 0x00, 0x00, 0x00, // message type length (20 bytes)
            0x74, 0x79, 0x70, 0x65, 0x3d, 0x73, 0x74, 0x64, 0x5f, 0x6d, 0x73, 0x67, 0x73, 0x2f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, // type=std_msgs/String
0x09, 0x00, 0x00, 0x00, // message body length (9 bytes)
      0x05, 0x00, 0x00, 0x00, // first field is 5 bytes
            0x68, 0x65, 0x6c, 0x6c, 0x6f // hello
]

            let expectedPacket = Packet<String>(
                messageDefinition: "string data\n\n",
                callerid: "/rostopic_4767_1316912741557",
                latching: "1",
                md5sum: "992ce8a1687cec8c8bd883ec73ca41d1",
                topic: "/chatter",
                messageType: "std_msgs/String",
                message: "hello"
            )

            xit("successfully decodes the message") {
                let data = Data(bytes: codedMessage)

                expect { return try subject.decode(data: data, of: String.self) }.to(equal(expectedPacket))
            }
        }
    }
}
